#!/usr/bin/env python3
#
# Copyright (C) 2014-2015 Christopher Hewitt
#
# Permission is hereby granted, free of charge, to any person obtaining a 
# copy of this software and associated documentation files (the "Software"), 
# to deal in the Software without restriction, including without limitation 
# the rights to use, copy, modify, merge, publish, distribute, sublicense, 
# and/or sell copies of the Software, and to permit persons to whom the 
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in 
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
# DEALINGS IN THE SOFTWARE.

import threading
import platform
import signal
import sys
import os

from ui.processes import GUIProcessesWindow
from proc.stat import ProcStatReader
from proc.maps import ProcMapsReader
from proc.mem import ProcMemReader

class GoldfishError(Exception):

    def __init__(self, message):
        self.message = message

    def __str__(self):
        return self.message


class Goldfish(threading.Thread):

    def __init__(self):
        if platform.system() != 'Linux':
            print('this will probably not work unless you are using linux...')

        signal.signal(signal.SIGINT, signal.SIG_DFL)

        stat = ProcStatReader()
        maps = ProcMapsReader()
        mem = ProcMemReader()

        pids = stat.get_pids()
        processes = [ stat.read_proc_stat(pid) for pid in pids ]

        self.processes_window = GUIProcessesWindow(stat, maps, mem)
        self.processes_window.update_process_list(processes)

        perm = mem.ptrace_scope_status()
        self.processes_window.update_ptrace_label(perm)
        self.processes_window.run()


if __name__ == '__main__':
    try:
        Goldfish()
    except GoldfishError as err:
        print('error: {msg}'.format(msg=err))
        sys.exit(-1)
    except KeyboardInterrupt:
        pass

# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=python
